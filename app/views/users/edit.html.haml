:css
  .required {
      color: black;
  }
  table.form {
    width: auto;
  }
  table.form td {
    width: 500px;
  }

:javascript
  /* refer to input fields by name for rules */
  /* refer to input fields by id for equalTo */
  jQuery(document).ready(function() {
    jQuery("#user_info").validate({
      rules: {
        "user[email]": {
          required: true,
          email: true,
        },
        "user[password]": "required",
        "user[password_confirmation]": {
          required: true,
          equalTo: "#user_password",
        },
      }
    });
  });

  (function (jQuery) {
    // custom css expression for a case-insensitive contains()
    jQuery.expr[':'].Contains = function(a,i,m){
        return (a.textContent || a.innerText || "").toUpperCase().indexOf(m[3].toUpperCase())>=0;
    };

    function listFilter(header, list) { // header is any element, list is an unordered list
      // create and add the filter form to the header
      var form = jQuery("<form>").attr({"class":"filterform","action":"#"}),
          input = jQuery("<input>").attr({"class":"filterinput","type":"text"});
      jQuery(form).append(input).appendTo(header);

      jQuery(input)
        .change( function () {
          var filter = jQuery(this).val();
          if(filter) {
            // this finds all links in a list that contain the input,
            // and hide the ones not containing the input while showing the ones that do
            jQuery(list).find("a:not(:Contains(" + filter + "))").closest("li").hide();
            jQuery(list).find("a:Contains(" + filter + ")").closest("li").show();
          } else {
            jQuery(list).find("li").show();
          }
          return false;
        })
      .keyup( function () {
          // fire the above change event after every letter
          jQuery(this).change();
      });
    }


    //ondomready
    jQuery(function () {
      listFilter(jQuery("#select_ontologies"), jQuery("#ont_list"));
    });
  }(jQuery));
%div{:style => "padding: 1em;"}
  = form_for(:user, :url => user_path(@user.username), :html => { :id => "user_info", :method => :put }) do |f|
    - unless @errors.nil?
      .enable-lists{:style => "color: red; padding: 1em;"}
        Errors creating your account:
        %ul
          - for error in @errors
            %li= error
    %table.form
      - if @user.validate_password.nil?
        %tr
          %th
            First Name
          %td.top= text_field :user, :firstName, value: @user.firstName
        %tr
          %th
            Last Name
          %td= text_field :user, :lastName, value: @user.lastName
        %tr
          %th
            Email Address *
          %td
            = text_field :user, :email, value: @user.email
            \&nbsp;&nbsp;
        = hidden_field :user, :username, value: @user.username
      - else
        = hidden_field :user, :username, value: @user.username
        = hidden_field :user, :firstName, value: @user.firstName
        = hidden_field :user, :lastName, value: @user.lastName
        = hidden_field :user, :email, value: @user.email
        %tr
          %th
            Password: *
          %td.top
            = password_field :user, :password
            &nbsp;&nbsp;
        %tr
          %th
            Re-enter Password: *
          %td
            = password_field :user, :password_confirmation
            &nbsp;&nbsp;
      %tr
        %td{:align => "left", :colspan => "2"}
          = submit_tag "Update", :class=>"greenbtn"
          \&nbsp;&nbsp;&nbsp;&nbsp;
          - unless params[:password].eql?("true")
            = link_to "Change Password", edit_user_path(CGI.escape(session[:user].username), password: true)
    %br/
